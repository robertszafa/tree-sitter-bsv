====================
tuple bind
====================

module mkSub (Tuple3#(UInt#(5), Bit#(32), Bit#(8)));
  return tuple3(7,8,9);
endmodule

module mkTest ();
  Bool b;
  Integer i;

  // the types of the first two are wrong
  {b, i, .*} <- mkSub;
endmodule


---

    (sourceFile
      (packageStmt
        (moduleDef
          (moduleProto
            (identifier)
            (moduleFormalArgs
              (type
                (typePrimary
                  (typeIde
                    (identifier))
                  (type
                    (typePrimary
                      (typeIde
                        (identifier))
                      (type
                        (typePrimary
                          (typeNat
                            (decDigits))))))
                  (type
                    (typePrimary
                      (typeIde
                        (identifier))
                      (type
                        (typePrimary
                          (typeNat
                            (decDigits))))))
                  (type
                    (typePrimary
                      (typeIde
                        (identifier))
                      (type
                        (typePrimary
                          (typeNat
                            (decDigits))))))))))
          (moduleStmt
            (returnStmt
              (expression
                (exprPrimary
                  (functionCall
                    (exprPrimary
                      (identifier))
                    (expression
                      (exprPrimary
                        (intLiteral
                          (unsizedIntLiteral
                            (decNum
                              (decDigits))))))
                    (expression
                      (exprPrimary
                        (intLiteral
                          (unsizedIntLiteral
                            (decNum
                              (decDigits))))))
                    (expression
                      (exprPrimary
                        (intLiteral
                          (unsizedIntLiteral
                            (decNum
                              (decDigits)))))))))))))
      (packageStmt
        (moduleDef
          (moduleProto
            (identifier))
          (moduleStmt
            (varDecl
              (type
                (typePrimary
                  (typeIde
                    (identifier))))
              (varInit
                (lValue
                  (identifier)))))
          (moduleStmt
            (varDecl
              (type
                (typePrimary
                  (typeIde
                    (identifier))))
              (varInit
                (lValue
                  (identifier)))))
          (comment)
          (moduleStmt
            (moduleInst
              (lValue
                (tupleBind
                  (identifier)
                  (identifier)))
              (moduleApp
                (identifier)))))))

====================
tuple bind error
====================

module mkSub (Tuple3#(UInt#(5), Bit#(32), Bit#(8)));
  return tuple3(7,8,9);
endmodule

module mkTest ();
  Bool b;
  Integer i;

  // the types of the first two are wrong
  {} <- mkSub;
endmodule


---

    (sourceFile
      (packageStmt
        (moduleDef
          (moduleProto
            (identifier)
            (moduleFormalArgs
              (type
                (typePrimary
                  (typeIde
                    (identifier))
                  (type
                    (typePrimary
                      (typeIde
                        (identifier))
                      (type
                        (typePrimary
                          (typeNat
                            (decDigits))))))
                  (type
                    (typePrimary
                      (typeIde
                        (identifier))
                      (type
                        (typePrimary
                          (typeNat
                            (decDigits))))))
                  (type
                    (typePrimary
                      (typeIde
                        (identifier))
                      (type
                        (typePrimary
                          (typeNat
                            (decDigits))))))))))
          (moduleStmt
            (returnStmt
              (expression
                (exprPrimary
                  (functionCall
                    (exprPrimary
                      (identifier))
                    (expression
                      (exprPrimary
                        (intLiteral
                          (unsizedIntLiteral
                            (decNum
                              (decDigits))))))
                    (expression
                      (exprPrimary
                        (intLiteral
                          (unsizedIntLiteral
                            (decNum
                              (decDigits))))))
                    (expression
                      (exprPrimary
                        (intLiteral
                          (unsizedIntLiteral
                            (decNum
                              (decDigits)))))))))))))
      (packageStmt
        (moduleDef
          (moduleProto
            (identifier))
          (moduleStmt
            (varDecl
              (type
                (typePrimary
                  (typeIde
                    (identifier))))
              (varInit
                (lValue
                  (identifier)))))
          (moduleStmt
            (varDecl
              (type
                (typePrimary
                  (typeIde
                    (identifier))))
              (varInit
                (lValue
                  (identifier)))))
          (comment)
          (moduleStmt
            (moduleInst
              (lValue
                (tupleBind
                  (MISSING identifier)))
              (moduleApp
                (identifier)))))))
